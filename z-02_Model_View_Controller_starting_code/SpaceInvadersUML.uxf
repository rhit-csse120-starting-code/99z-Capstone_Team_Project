<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><help_text></help_text><element><id>UMLClass</id><coordinates><x>30</x><y>268</y><w>300</w><h>100</h></coordinates><panel_attributes>Controller
bg=red
-

-
get_and_handle_events()
exit_if_time_to_quit(events)
key_was_pressed_on_this_cycle(key, events) -&gt; bool
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLPackage</id><coordinates><x>320</x><y>28</y><w>350</w><h>160</h></coordinates><panel_attributes>main
--
bg=orange
halign=left
Initializes PyGame.

Implements a Model-View-Controller (MVC) architecture:
1. Constructs the Game, View and Controller.
2. Enters the game loop, which repeatedly:
  -- Asks the Controller object to get and respond to events.
  -- Asks the Game object to run one cycle.
  -- Asks the View object to draw everything.</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>780</x><y>28</y><w>220</w><h>120</h></coordinates><panel_attributes>View
bg=red
-

-
draw_everything()
  -- Draws the background.
  -- Asks the Game object to ask the
     Game things to draw themselves.</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>390</x><y>238</y><w>380</w><h>130</h></coordinates><panel_attributes>Game
bg=red
-

-
run_one_cycle()
  -- tells the Game to do whatever actions need to happen
     (independently of user input) during this cycle of the game loop
draw_game()
  -- tells the Game objects  to draw themselves
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLPackage</id><coordinates><x>830</x><y>238</y><w>230</w><h>80</h></coordinates><panel_attributes>screen
--
bg=yellow
The pygame.Surface object returned
by pygame.display.set_model().</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>410</x><y>178</y><w>140</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>110;60;110;40;10;40;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>230</x><y>178</y><w>160</w><h>110</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1</panel_attributes><additional_attributes>10;90;10;50;80;50;140;10</additional_attributes></element><element><id>Relation</id><coordinates><x>660</x><y>58</y><w>140</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1</panel_attributes><additional_attributes>120;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>950</x><y>135</y><w>40</w><h>140</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>12;120;10;13</additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>178</y><w>340</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
m2=constructs
m1=1
m2pos=10,-12
</panel_attributes><additional_attributes>310;60;310;30;10;30;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>720</x><y>135</y><w>120</w><h>120</h></coordinates><panel_attributes>lt=&lt;-
m1=1

</panel_attributes><additional_attributes>10;100;10;40;100;40;100;13</additional_attributes></element><element><id>UMLNote</id><coordinates><x>20</x><y>28</y><w>240</w><h>60</h></coordinates><panel_attributes>Model-View-Controller
(MVC) architecture.
PUT THE NAME OF YOUR GAME HERE.
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLActor</id><coordinates><x>40</x><y>108</y><w>60</w><h>110</h></coordinates><panel_attributes>Player 1</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>60</x><y>168</y><w>90</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
arrow keys</panel_attributes><additional_attributes>10;100;10;10</additional_attributes></element><element><id>UMLActor</id><coordinates><x>130</x><y>108</y><w>60</w><h>110</h></coordinates><panel_attributes>Player 2</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>150</x><y>168</y><w>80</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
wasd keys</panel_attributes><additional_attributes>10;100;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>760</x><y>258</y><w>90</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
m2=1
m2pos=10,0
</panel_attributes><additional_attributes>70;20;10;20</additional_attributes></element><element><id>UMLNote</id><coordinates><x>190</x><y>108</y><w>120</w><h>70</h></coordinates><panel_attributes>Here are examples
of how your Player(s)
interaction(s) might
be represented.
bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>740</x><y>428</y><w>180</w><h>210</h></coordinates><panel_attributes>Enemies
-
screen: pygame.Surface
enemy_rows
enemies_per_row
distance_from_top
h_space_between_enemies
v_space_between_enemies
h_speed, v_speed
list_of_enemies: [Enemy]
-
draw()
move()
remove_exploded_enemies()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>470</x><y>428</y><w>250</w><h>150</h></coordinates><panel_attributes>Missiles
-
screen: pygame.Surface
list_of_missiles: [Missile]
-
draw()
move()
add_missile()
remove_dead_missiles()
handle_explosions(Enemies, ScoreBoard)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>40</x><y>468</y><w>150</w><h>250</h></coordinates><panel_attributes>Fighter
-
screen: pygame.Surface
image
width, height
x, y
speed
fire_sound
explosion_sound
is_exploded: bool
-
draw()
move_left()
move_right()
fire_missile()
explode()
is_hit_by(MIssile): bool


</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>660</x><y>355</y><w>160</w><h>90</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>130;70;140;40;10;40;10;13</additional_attributes></element><element><id>Relation</id><coordinates><x>530</x><y>355</y><w>90</w><h>90</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>10;73;20;13</additional_attributes></element><element><id>Relation</id><coordinates><x>80</x><y>355</y><w>350</w><h>130</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=1
</panel_attributes><additional_attributes>10;113;10;70;330;70;330;13</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1000</x><y>368</y><w>150</w><h>250</h></coordinates><panel_attributes>Enemy
-
screen: pygame.Surface
image
width, height
x, y
h_speed, v_speed
direction
original_x
explosion_sound
is_off_the_screen: bool
has_exploded: bool
-
draw()
move()
explode()
is_hit_by(Missile): bool
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>270</x><y>488</y><w>160</w><h>190</h></coordinates><panel_attributes>Missile
-
screen: pygame.Surface
x, y
color
width, height
speed
is_off_the_screen: bool
has_exploded: bool
-
draw()
move()
explode()

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>180</x><y>535</y><w>110</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=*
m1pos=0,5


</panel_attributes><additional_attributes>90;20;10;23</additional_attributes></element><element><id>Relation</id><coordinates><x>910</x><y>515</y><w>110</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
constructs
m1=*
m1pos=0,5


</panel_attributes><additional_attributes>90;23;10;23</additional_attributes></element><element><id>Relation</id><coordinates><x>180</x><y>455</y><w>310</w><h>70</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>290;10;110;10;10;43</additional_attributes></element><element><id>Relation</id><coordinates><x>180</x><y>265</y><w>1020</w><h>460</h></coordinates><panel_attributes>lt=&lt;-
m1=1
</panel_attributes><additional_attributes>880;10;1000;10;1000;430;10;433</additional_attributes></element><element><id>Relation</id><coordinates><x>420</x><y>515</y><w>70</w><h>40</h></coordinates><panel_attributes>lt=&lt;-
m1=*</panel_attributes><additional_attributes>10;13;50;13</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1030</x><y>68</y><w>150</w><h>130</h></coordinates><panel_attributes>ScoreBoard
-
screen: pygame:Surface
background: (R, G, B)
x, y
font class, size, color
-
draw()
increment_score()

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1010</x><y>305</y><w>40</w><h>80</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>20;13;10;63</additional_attributes></element><element><id>Relation</id><coordinates><x>870</x><y>305</y><w>40</w><h>140</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>20;13;10;123</additional_attributes></element><element><id>Relation</id><coordinates><x>630</x><y>295</y><w>550</w><h>380</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>430;13;530;10;530;360;10;360;10;283</additional_attributes></element><element><id>Relation</id><coordinates><x>420</x><y>275</y><w>770</w><h>420</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>640;13;750;10;750;390;10;393</additional_attributes></element><element><id>Relation</id><coordinates><x>1050</x><y>185</y><w>60</w><h>110</h></coordinates><panel_attributes>lt=&lt;-
m1=1</panel_attributes><additional_attributes>12;80;40;80;40;13</additional_attributes></element><element><id>Relation</id><coordinates><x>320</x><y>295</y><w>90</w><h>60</h></coordinates><panel_attributes>lt=&lt;-
m1=1


</panel_attributes><additional_attributes>70;23;10;23</additional_attributes></element></diagram>